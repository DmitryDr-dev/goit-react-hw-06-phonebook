{"version":3,"sources":["components/Filter/Filter.module.css","components/Section/Section.module.css","components/ContactsList/ContactsList.module.css","components/Container/Container.module.css","components/Section/Section.jsx","components/Container/Container.jsx","redux/contacts-actions.js","redux/contacts-selectors.js","components/ContactsListItem/ContactsListItem.jsx","components/ContactsList/ContactsList.jsx","components/AddContactForm/AddContactForm.jsx","components/Filter/Filter.jsx","views/ContactsView.jsx","App.js","redux/contacts-reducer.js","redux/store.js","index.js","components/AddContactForm/AddContactForm.module.css","components/ContactsListItem/ContactsListItem.module.css"],"names":["module","exports","Section","title","children","className","styles","section","sectionTitle","Container","container","contactsActions","addContact","createAction","deleteContact","changeFilter","getContacts","state","contacts","getFilter","filter","getFilteredContacts","normalizedFilter","toLowerCase","contact","name","includes","ContactsListItem","number","onDelete","contactName","contactNumber","type","contactDltBtn","onClick","ContactsList","useSelector","dispatch","useDispatch","map","id","contactsItem","onDeleteContact","AddContactForm","useState","setName","setNumber","nameInputId","uuidv4","numberInputId","checkForDuplicatedContacts","allContacts","newContact","normalizedContact","find","alert","onAddContact","handleInputChange","e","target","value","trim","contactForm","onSubmit","preventDefault","contactFormLabel","htmlFor","pattern","required","onChange","contactFormInput","contactFormBtn","Filter","filterInputId","filterLabel","filterInput","ContactsView","App","createReducer","payload","_","combineReducers","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.fb0b17a2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__1TixU\",\"filterLabel\":\"Filter_filterLabel__1jRNE\",\"filterInput\":\"Filter_filterInput__1moej\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__xbIs9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactsList_contacts__ALQCG\",\"contactsItem\":\"ContactsList_contactsItem__2kSBC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1MyXZ\"};","import PropTypes from 'prop-types';\r\nimport styles from './Section.module.css';\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <section className={styles.section}>\r\n      {title && <h2 className={styles.sectionTitle}>{title}</h2>}\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node.isRequired, // ?? node\r\n};\r\n\r\nexport default Section;\r\n","import PropTypes from 'prop-types';\r\nimport styles from './Container.module.css';\r\n\r\nfunction Container({ children }) {\r\n  return <div className={styles.container}>{children}</div>;\r\n}\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default Container;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addContact = createAction('contacts/addContact');\r\nconst deleteContact = createAction('contacts/deleteContact');\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\nconst contactsActions = { addContact, deleteContact, changeFilter };\r\n\r\nexport default contactsActions;\r\n\r\n// import types from './contacts-types';\r\n// export const addContact = newContact => ({\r\n//   type: types.ADD,\r\n//   payload: newContact,\r\n// });\r\n\r\n// export const deleteContact = toDeleteId => ({\r\n//   type: types.DELETE,\r\n//   payload: toDeleteId,\r\n// });\r\n\r\n// export const changeFilter = value => ({\r\n//   type: types.FILTER,\r\n//   payload: value,\r\n// });\r\n","export const getContacts = state => state.contacts;\r\nexport const getFilter = state => state.filter;\r\n\r\nexport const getFilteredContacts = state => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport styles from './ContactsListItem.module.css';\r\n\r\nexport default function ContactsListItem({ name, number, onDelete }) {\r\n  return (\r\n    <div className={styles.contact}>\r\n      <span>\r\n        <span className={styles.contactName}>{name}: </span>\r\n        <span className={styles.contactNumber}>{number}</span>\r\n      </span>\r\n      <button type=\"button\" className={styles.contactDltBtn} onClick={onDelete}>\r\n        Delete\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nContactsListItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n","import { useSelector, useDispatch } from 'react-redux';\r\nimport styles from './ContactsList.module.css';\r\nimport contactsActions from '../../redux/contacts-actions';\r\nimport { getFilteredContacts } from '../../redux/contacts-selectors';\r\nimport ContactsListItem from '../ContactsListItem';\r\n\r\nfunction ContactsList() {\r\n  const contacts = useSelector(getFilteredContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const onDeleteContact = id => dispatch(contactsActions.deleteContact(id));\r\n\r\n  return (\r\n    <ul className={styles.contacts}>\r\n      {contacts.map(({ id, name, number }) => {\r\n        return (\r\n          <li key={id} className={styles.contactsItem}>\r\n            <ContactsListItem\r\n              name={name}\r\n              number={number}\r\n              onDelete={() => onDeleteContact(id)}\r\n            />\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default ContactsList;\r\n","import { useSelector, useDispatch } from 'react-redux';\r\nimport { useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport styles from './AddContactForm.module.css';\r\nimport contactsActions from '../../redux/contacts-actions';\r\nimport { getContacts } from '../../redux/contacts-selectors';\r\n\r\nfunction AddContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const onAddContact = newContact =>\r\n    dispatch(contactsActions.addContact(newContact));\r\n\r\n  const nameInputId = uuidv4();\r\n  const numberInputId = uuidv4();\r\n\r\n  const checkForDuplicatedContacts = (allContacts, newContact) => {\r\n    const normalizedContact = newContact.name.toLowerCase();\r\n\r\n    if (\r\n      allContacts.find(\r\n        contact => contact.name.toLowerCase() === normalizedContact,\r\n      )\r\n    ) {\r\n      alert(`${newContact.name} already exists!`);\r\n      return;\r\n    }\r\n\r\n    onAddContact(newContact);\r\n  };\r\n\r\n  const handleInputChange = e => {\r\n    const { name, value } = e.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value.trim());\r\n        break;\r\n      case 'number':\r\n        setNumber(value.trim());\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const clearInput = () => {\r\n    setNumber('');\r\n    setName('');\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const newContact = { id: uuidv4(), name, number };\r\n\r\n    checkForDuplicatedContacts(contacts, newContact);\r\n\r\n    clearInput();\r\n  };\r\n\r\n  return (\r\n    <form className={styles.contactForm} onSubmit={handleSubmit}>\r\n      <label className={styles.contactFormLabel} htmlFor={nameInputId}>\r\n        Name\r\n      </label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        id={nameInputId}\r\n        value={name}\r\n        onChange={handleInputChange}\r\n        className={styles.contactFormInput}\r\n      />\r\n      <label className={styles.contactFormLabel} htmlFor={numberInputId}>\r\n        Number\r\n      </label>\r\n      <input\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        required\r\n        id={numberInputId}\r\n        value={number}\r\n        onChange={handleInputChange}\r\n        className={styles.contactFormInput}\r\n      />\r\n      <button type=\"submit\" className={styles.contactFormBtn}>\r\n        Add Contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default AddContactForm;\r\n","import { useSelector, useDispatch } from 'react-redux';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport styles from './Filter.module.css';\r\nimport { getFilter } from '../../redux/contacts-selectors';\r\nimport contactsActions from '../../redux/contacts-actions';\r\n\r\nfunction Filter() {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  const filterInputId = uuidv4();\r\n\r\n  return (\r\n    <div className={styles.filter}>\r\n      <label htmlFor={filterInputId} className={styles.filterLabel}>\r\n        Search\r\n      </label>\r\n      <input\r\n        type=\"text\"\r\n        className={styles.filterInput}\r\n        id={filterInputId}\r\n        value={value}\r\n        onChange={e => dispatch(contactsActions.changeFilter(e.target.value))}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Filter;\r\n","import Section from '../components/Section';\r\nimport Container from '../components/Container';\r\nimport ContactsList from '../components/ContactsList';\r\nimport AddContactForm from '../components/AddContactForm';\r\nimport Filter from '../components/Filter';\r\n\r\nfunction ContactsView() {\r\n  return (\r\n    <Container>\r\n      <h1>Your Contacts</h1>\r\n      <Section>\r\n        <AddContactForm />\r\n      </Section>\r\n      <Section>\r\n        <Filter />\r\n        <ContactsList />\r\n      </Section>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default ContactsView;\r\n","import ContactsView from './views/ContactsView';\r\n\r\nfunction App() {\r\n  return <ContactsView />;\r\n}\r\n\r\nexport default App;\r\n\r\n// import Section from './components/Section';\r\n// import Container from './components/Container';\r\n// import ContactsList from './components/ContactsList';\r\n// import AddContactForm from './components/AddContactForm';\r\n// import Filter from './components/Filter';\r\n\r\n// function App() {\r\n//   return (\r\n//     <Container>\r\n//       <h1>Your Contacts</h1>\r\n//       <Section>\r\n//         <AddContactForm />\r\n//       </Section>\r\n//       <Section>\r\n//         <Filter />\r\n//         <ContactsList />\r\n//       </Section>\r\n//     </Container>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport contactsActions from './contacts-actions';\r\n\r\nconst initialState = [\r\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n];\r\n\r\nconst contacts = createReducer(initialState, {\r\n  [contactsActions.addContact]: (state, { payload }) => [...state, payload],\r\n  [contactsActions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [contactsActions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  filter,\r\n});\r\n\r\n// import { combineReducers } from 'redux';\r\n// import { createReducer } from '@reduxjs/toolkit';\r\n// import actions from './todos-actions';\r\n\r\n// const items = createReducer([], {\r\n//   [actions.addTodo]: (state, { payload }) => [...state, payload],\r\n//   [actions.deleteTodo]: (state, { payload }) =>\r\n//     state.filter(({ id }) => id !== payload),\r\n//   [actions.toggleCompleted]: (state, { payload }) =>\r\n//     state.map(todo =>\r\n//       todo.id === payload ? { ...todo, completed: !todo.completed } : todo,\r\n//     ),\r\n// });\r\n\r\n// const filter = createReducer('', {\r\n//   [actions.changeFilter]: (_, { payload }) => payload,\r\n// });\r\n\r\n// export default combineReducers({\r\n//   items,\r\n//   filter,\r\n// });\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from './contacts-reducer';\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nexport const store = configureStore({\r\n  reducer: persistReducer(contactsPersistConfig, contactsReducer),\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }).concat(logger),\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\n// import contactsReducer from './contacts-reducer';\r\n\r\n// const persistedState = localStorage.getItem('reduxState')\r\n//   ? JSON.parse(localStorage.getItem('reduxState'))\r\n//   : {};\r\n\r\n// const store = createStore(\r\n//   contactsReducer,\r\n//   persistedState,\r\n//   composeWithDevTools(),\r\n// );\r\n\r\n// store.subscribe(() => {\r\n//   localStorage.setItem('reduxState', JSON.stringify(store.getState()));\r\n// });\r\n\r\n// export default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store, persistor } from './redux/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <PersistGate loading={null} persistor={persistor}>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </PersistGate>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"AddContactForm_contactForm__26zpA\",\"contactFormInput\":\"AddContactForm_contactFormInput__2HL0_\",\"contactFormBtn\":\"AddContactForm_contactFormBtn__gZQro\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"ContactsListItem_contact__TSY_6\",\"contactNumber\":\"ContactsListItem_contactNumber__3yb8t\",\"contactName\":\"ContactsListItem_contactName__2DVBa\",\"contactDltBtn\":\"ContactsListItem_contactDltBtn__FDquS\"};"],"sourceRoot":""}